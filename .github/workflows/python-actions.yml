name: Python Actions

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment'
        required: true
        default: 'development'
        type: choice
        options:
          - production
          - development
      app:
        description: 'Application'
        required: true
        type: choice
        options:
          - api
      imagename:
        description: 'Name of the image (used to tag image)'
        required: true
        type: choice
        options:
          - diffusers_api
      dockerfile:
        description: 'Dockerfile used to build to image'
        required: true
        type: choice
        options:
          - "docker/Dockerfile"
      push:
        description: 'Should push to Dockerhub?'
        required: true
        type: boolean
  workflow_call:
    inputs:
      env:
        type: string
        required: true
      app:
        type: string
        required: true
      imagename:
        type: string
        required: true
      dockerfile:
        type: string
        required: false
      push:
        type: boolean
        required: false
        default: false
    secrets:
      DOCKERHUB_TOKEN:
        required: true
      DOCKERHUB_USERNAME:
        required: true
jobs:
  run:
    name: "docker_build/${{ inputs.imagename }}"
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}

    steps:
      # Checkout repo
      - name: Checkout Repo
        uses: actions/checkout@v3
      # Get app version
      - name: Extract version from package.json
        uses: sergeysova/jq-action@v2.3.0
        id: version
        with:
          cmd: 'jq .version ${{ inputs.app }}/package.json -r'
      # Set docker image tag
      - name: Set docker image tag
        id: tag
        env:
          IS_PROD: ${{ inputs.env == 'production' }}
        run: |
          tag="${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.imagename }}:dev"
          if ${IS_PROD} == true; then
            tag="${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.imagename }}:v${{ steps.version.outputs.value }} , ${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.imagename }}:latest"
          else
            tag="${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.imagename }}:dev-$(echo $GITHUB_SHA | head -c7)"
          fi
          echo "value=$tag" >> $GITHUB_OUTPUT

      - name: 'Build Docker Cache Tag'
        id: cache_tag
        env:
          IS_PROD: ${{ inputs.env == 'production' }}
        run: |
          tag="${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.app }}:stage"
          if ${IS_PROD} == true; then
            tag="${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.app }}:latest"
          fi
          echo "value=$tag" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      
      # Set up Buildx for building docker images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      # Build 
      - name: Docker image Build
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          push: false 
          load: true # For local pushing later
          tags: ${{ steps.tag.outputs.value }}
          provenance: false

      # Push (buildix fails to push large images; no chuked transfer https://github.com/containerd/containerd/pull/7459)
      - name: Docker image Push
        if: ${{ inputs.push == true }}
        run: |
          tag_array=($(echo ${{ steps.tag.outputs.value }} | tr "," "\n"))
          for x in ${tag_array[@]}; do
            echo "pushing docker image ${x}"
            docker push $x
          done


